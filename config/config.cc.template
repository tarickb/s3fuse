/*
 * base/config.cc
 * -------------------------------------------------------------------------
 * Definitions for s3::base::config static members and init() method.
 * -------------------------------------------------------------------------
 *
 * Copyright (c) 2012, Tarick Bedeir.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "base/config.h"

#include <strings.h>

#include <fstream>
#include <stdexcept>

#include "base/logger.h"
#include "base/paths.h"

namespace s3 {
namespace base {

namespace {
constexpr const char *DEFAULT_CONFIG_FILES[] = {
    "~/." PACKAGE_NAME "/" PACKAGE_NAME ".conf",
    SYSCONFDIR "/" PACKAGE_NAME ".conf"};

template <typename T>
class OptionParserWorker {
 public:
  static void Parse(const std::string &str, T *out) {
    throw std::runtime_error("unknown or invalid config variable type.");
  }
};

template <>
class OptionParserWorker<bool> {
 public:
  static void Parse(const std::string &_str, bool *out) {
    const char *str = _str.c_str();

    if (!strcasecmp(str, "yes") || !strcasecmp(str, "true") ||
        !strcasecmp(str, "1") || !strcasecmp(str, "on")) {
      *out = true;
      return;
    }

    if (!strcasecmp(str, "no") || !strcasecmp(str, "false") ||
        !strcasecmp(str, "0") || !strcasecmp(str, "off")) {
      *out = false;
      return;
    }

    throw std::runtime_error("cannot parse.");
  }
};

template <>
class OptionParserWorker<int> {
 public:
  static void Parse(const std::string &str, int *out) { *out = std::stoi(str); }
};

template <>
class OptionParserWorker<size_t> {
 public:
  static void Parse(const std::string &str, size_t *out) {
    *out = std::stoull(str);
  }
};

template <>
class OptionParserWorker<std::string> {
 public:
  static void Parse(const std::string &str, std::string *out) { *out = str; }
};

template <typename T>
class OptionParser {
 public:
  static void Parse(int line_number, const char *key, const char *type,
                    const std::string &str, T *out) {
    try {
      OptionParserWorker<T>::Parse(str, out);
    } catch (...) {
      S3_LOG(LOG_ERR, "Config::Init",
             "error at line %i: cannot parse [%s] for key [%s] of type %s.\n",
             line_number, str.c_str(), key, type);
      throw;
    }
  }
};
}  // namespace

#define CONFIG(type, name, def, desc) type Config::s_##name = (def);
#define CONFIG_CONSTRAINT(x, y)
#define CONFIG_KEY(x)
#define CONFIG_SECTION(x)

__CONFIG_INC_GOES_HERE__

#undef CONFIG
#undef CONFIG_CONSTRAINT
#undef CONFIG_KEY
#undef CONFIG_SECTION

void Config::Init(const std::string &file) {
  std::ifstream ifs;

  if (file.empty()) {
    for (const auto &path : DEFAULT_CONFIG_FILES) {
      ifs.open(Paths::Transform(path).c_str());
      if (ifs.good()) break;
    }

    if (ifs.fail()) {
      for (const auto &path : DEFAULT_CONFIG_FILES)
        S3_LOG(LOG_ERR, "Config::Init",
               "unable to open configuration in [%s]\n", path);
      throw std::runtime_error("cannot open any default config files");
    }
  } else {
    ifs.open(Paths::Transform(file).c_str());
    if (ifs.fail()) {
      S3_LOG(LOG_ERR, "Config::Init", "cannot open file [%s].\n", file.c_str());
      throw std::runtime_error("cannot open specified config file");
    }
  }

  int line_number = 0;

  while (ifs.good()) {
    std::string line;
    std::getline(ifs, line);
    line_number++;

    size_t pos = line.find('#');
    if (pos != std::string::npos) line = line.substr(0, pos);
    if (line.empty()) continue;

    pos = line.find('=');
    if (pos == std::string::npos) {
      S3_LOG(LOG_ERR, "Config::Init", "error at line %i: missing '='.\n",
             line_number);
      throw std::runtime_error("malformed config file");
    }

    std::string key = line.substr(0, pos);
    std::string value = line.substr(pos + 1);

#define CONFIG(type, name, def, desc)                                       \
  if (key == #name) {                                                       \
    OptionParser<type>::Parse(line_number, #name, #type, value, &s_##name); \
                                                                            \
    continue;                                                               \
  }

#define CONFIG_CONSTRAINT(x, y)
#define CONFIG_KEY(x)
#define CONFIG_SECTION(x)

    __CONFIG_INC_GOES_HERE__

#undef CONFIG
#undef CONFIG_CONSTRAINT
#undef CONFIG_KEY
#undef CONFIG_SECTION

    S3_LOG(LOG_ERR, "Config::Init",
           "error at line %i: unknown directive '%s'\n", line_number,
           key.c_str());
    throw std::runtime_error("malformed config file");
  }

#define CONFIG(type, name, def, desc)

#define CONFIG_CONSTRAINT(test, message)               \
  if (!(test)) {                                       \
    S3_LOG(LOG_ERR, "Config::Init", "%s\n", message);  \
    throw std::runtime_error("malformed config file"); \
  }

#define CONFIG_KEY(key) s_##key
#define CONFIG_SECTION(x)

  __CONFIG_INC_GOES_HERE__

#undef CONFIG
#undef CONFIG_CONSTRAINT
#undef CONFIG_KEY
#undef CONFIG_SECTION
}

}  // namespace base
}  // namespace s3
